package simpledb;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate p;
    private DbIterator child1;
    private DbIterator child2;
    private Tuple cur1;
    private Tuple cur2;
    private Map<Field, ArrayList<Tuple>> fieldTupleMap = new ConcurrentHashMap<>();

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        this.fieldTupleMap = new ConcurrentHashMap<Field, ArrayList<Tuple>>();

        this.reset();
    }

    public JoinPredicate getJoinPredicate() {
        return this.p;
    }

    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(this.child1.getTupleDesc(), this.child2.getTupleDesc());
    }
    
    public String getJoinField1Name()
    {
        return this.child1.getTupleDesc().getFieldName(this.p.getField1());
    }
    
    public String getJoinField2Name()
    {
        return this.child2.getTupleDesc().getFieldName(this.p.getField2());
    }
    
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        if (child1 == null || child2 == null) throw new NoSuchElementException("Not found child");
        
        child1.open();
        child2.open();
        super.open();
        
        this.reset();
        while (child2.hasNext()){
            cur1 = child2.next();
            Field key = cur1.getField(p.getField2());
            if (!fieldTupleMap.containsKey(key)) fieldTupleMap.put(key, new ArrayList<Tuple>());

            fieldTupleMap.get(key).add(cur1);
        }
    }

    public void close() {
        super.close();
        child1.close();
        child2.close();

        this.reset();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        this.close();
        this.open();
    }

    transient Iterator<Tuple> listIt = null;

    private Tuple mergeTuple(){
        cur2 = listIt.next();

        int num1 = cur1.getTupleDesc().numFields();
        int num2 = cur2.getTupleDesc().numFields();

        Tuple next = new Tuple(this.getTupleDesc());

        for (int i = 0; i < num1; i++)
            next.setField(i, cur1.getField(i));
        for (int i = 0; i < num2; i++)
            next.setField(num1 + i, cur2.getField(i));
        return next;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        if (child1 == null || child2 == null) return null;
        if (listIt != null && listIt.hasNext()){
            return mergeTuple();
        }

        while (child1.hasNext()) {
            cur1 = child1.next();

            Field key = cur1.getField(p.getField1());
            ArrayList<Tuple> tuples = fieldTupleMap.get(key);
            
            if (tuples == null) continue;
            listIt = tuples.iterator();
            return fetchNext();
        }

        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        DbIterator[] children = new DbIterator[2];
        children[0] = child1;
        children[1] = child2;

        return children;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        child1 = children[0];
        child2 = children[1];
    }
    
    private void reset() {
        this.cur1 = null;
        this.cur2 = null;
        fieldTupleMap.clear();

        this.listIt = null;
    }
}
